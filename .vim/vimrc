"Start dein Scripts-------------------------
if !&compatible
  set nocompatible
endif

" リーダーキーのマッピング
let mapleader = "\,"

" reset augroup
augroup MyAutoCmd
  autocmd!
augroup END

" dein settings {{{
" dein自体の自動インストール
let s:cache_home = empty($XDG_CACHE_HOME) ? expand('$HOME/.cache') : $XDG_CACHE_HOME
let s:dein_dir = s:cache_home . '/dein'
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if !isdirectory(s:dein_repo_dir)
  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))
endif
let &runtimepath = s:dein_repo_dir .",". &runtimepath
" プラグイン読み込み＆キャッシュ作成
let s:toml_file = fnamemodify(expand('<sfile>'), ':h').'/rc/dein.toml'
let s:lazy_toml = fnamemodify(expand('<sfile>'), ':h').'/rc/dein_lazy.toml'
let s:toml_vim_file = fnamemodify(expand('<sfile>'), ':h').'/rc/dein_vim.toml'
let s:lazy_vim_toml = fnamemodify(expand('<sfile>'), ':h').'/rc/dein_vim_lazy.toml'
let s:toml_nvim_file = fnamemodify(expand('<sfile>'), ':h').'/rc/dein_nvim.toml'
let s:lazy_nvim_toml = fnamemodify(expand('<sfile>'), ':h').'/rc/dein_nvim_lazy.toml'
let s:local_toml_file = '$HOME/dein_local.toml'
let s:local_lazy_toml = '$HOME/dein_local_lazy.toml'
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  if !has('nvim')
    call dein#load_toml(s:toml_vim_file, {'lazy': 0})
    call dein#load_toml(s:lazy_vim_toml, {'lazy': 1})
  else
    call dein#load_toml(s:toml_nvim_file, {'lazy': 0})
    call dein#load_toml(s:lazy_nvim_toml, {'lazy': 1})
  endif
  call dein#load_toml(s:toml_file, {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})
  if filereadable(expand(s:local_toml_file))
    call dein#load_toml(s:local_toml_file, {'lazy': 0})
  endif
  if filereadable(expand(s:local_lazy_toml))
    call dein#load_toml(s:local_lazy_toml, {'lazy': 1})
  endif
  call dein#end()
  call dein#save_state()
endif
" 不足プラグインの自動インストール
if has('vim_starting') && dein#check_install()
  call dein#install()
endif
"" plugin remove check
"let s:removed_plugins = dein#check_clean()
"if len(s:removed_plugins) > 0
"  call map(s:removed_plugins, "delete(v:val, 'rf')")
"  call dein#recache_runtimepath()
"endif
"" }}}

"End dein Scripts-------------------------

"Python support
let g:python_host_prog  = substitute(system('which python'),"\n","","")
let g:python3_host_prog = substitute(system('which python3'),"\n","","")

" Configuration file for vim
syntax enable
filetype plugin indent on "ファイルタイプの検索を有効にする
set background=dark
colorscheme molokai "カラースキーム
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup " Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/etc/pw.* set nowritebackup nobackup " Don't write backup file if vim is being called by "chpass"
"===== 表示設定 =====
set number "行番号の表示
set title "編集中ファイル名の表示
set showmatch "括弧入力時に対応する括弧を示す
set list "タブ、空白、改行を可視化
set visualbell "ビープ音を視覚表示
set laststatus=2 "ステータスを表示
set ruler "カーソル位置を表示
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
set virtualedit=onemore "カーソルを行末の一つ先まで移動可能にする
set autoindent "自動インデント
set smartindent "オートインデント
set smarttab "新しい行での自動インデント
set expandtab "タブ入力を複数の空白に置き換える
set tabstop=2 "インデントをスペース2つ分に設定
set shiftwidth=2 "自動的に入力されたインデントの空白を2つ分に設定
set softtabstop=2 "キーボードから入るタブの数
set listchars=tab:▸\ ,eol:↲,extends:❯,precedes:❮ "不可視文字の指定
set whichwrap=b,s,h,l,<,>,[,],~ "行頭、行末で行のカーソル移動を可能にする
set backspace=indent,eol,start "バックスペースでの行移動を可能にする
set showtabline=2 " 常にタブラインを表示
set signcolumn=yes " 左側にgitgutterとかのスペースを開けておく
set modelines=0 " 数字の行数分モードラインを検索する
"set noequalalways " ウィンドウの分割比率を自動で調整
"===== 検索設定 =====
set ignorecase "大文字、小文字の区別をしない
set smartcase "大文字が含まれている場合は区別する
set wrapscan "検索時に最後まで行ったら最初に戻る
set hlsearch "検索した文字を強調
set incsearch "インクリメンタルサーチを有効にする
"===== マウス設定 =====
set mouse=a
"===== その他 =====
set ttimeoutlen=10 "ESCキーの効きの速さ
set history=10000 " 履歴を10000件保存
set noswapfile " swapファイルを作らない
if has('persistent_undo') " 一度ファイルを閉じてもundoできる
  set undodir=~/.cache/undo
  set undofile
endif
if !has('nvim') " クリップボードと色の設定
  set clipboard+=unnamed,autoselect
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"  "vimのtrue color用の設定
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
  set clipboard+=unnamedplus
endif
augroup vimrcEx " vimでファイルをひらいたとき最後にカーソルが元にあった場所に移動する
  au BufRead * if line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe "normal g`\"" | endif
augroup END
" keymapping
noremap!  
nnoremap ; :
nnoremap : ;
"nnoremap == gg=G'''
nnoremap <ESC><ESC> :<C-u>noh<CR>
nnoremap t <Nop>
nnoremap tj gt
nnoremap tk gT
nnoremap tl :<C-u>+tabmove<CR>
nnoremap th :<C-u>-tabmove<CR>
nnoremap tt :<C-u>tabnew<CR>
nnoremap <C-p> :<C-u>so ~/.vim/vimrc<CR>
if has('mac') "OS別読み込み
  "mac用の設定を記述
  if !has('nvim') " マウス設定
    set ttymouse=xterm2
  endif
  set termguicolors "true color
elseif has('unix')
  "Linux用の設定を記述
  "##### auto fcitx  ###########
  let g:input_toggle = 1
  function! Fcitx2en()
    let s:input_status = system("fcitx-remote")
    if s:input_status == 2
      let g:input_toggle = 1
      let l:a = system("fcitx-remote -c")
    endif
  endfunction

  function! Fcitx2jp()
    let s:input_status = system("fcitx-remote")
    if s:input_status != 2 && g:input_toggle == 1
      let l:a = system("fcitx-remote -o")
      let g:input_toggle = 0
    endif
  endfunction

  "Leave Insert mode
  autocmd InsertLeave * call Fcitx2en()
  "autocmd InsertEnter * call Fcitx2jp()
  "##### auto fcitx end ######
endif

